package javaOop.chapter10_AbstractClassAndInterface;

/**
 * 被abstract关键字修饰的Class是Abstract Class
 * 被abstract关键字修饰的Func()是Abstract Func
 * <p>
 * 1.抽象类与普通类一样可以定义实例属性/实例方法/类属性/类方法
 * 2.抽象类独有定义抽象方法(没有方法体),且只有实例方法可以被抽象,实例属性和类方法/类属性均不能抽象
 * 3.如果一个类包含抽象类,则该类只能是抽象类,但抽象类不一定包含抽象方法
 * 4.只要是抽象类,就不能实例化
 * 5.private关键字不能修饰抽象方法,因为如此做子类将无法实现
 * <p>
 * 抽象类是为了更好的实现多态,抽象类作为父类,子类如果想实例化就一定要实现父类的抽象方法,或者子类自身也是抽象类,
 * 通过抽象方法让子类强制遵守实现(重写)父类的方法,实现多态
 * <p>
 * <p>
 * // TODO 抽象类及接口中的多态 还需校验修改
 * 接口和抽象类比较像定义不完全/没有定义父类方法的状态,所以只会执行子类继承/实现的方法,
 * 也就是用父类指向子类方法,执行子类的实现,
 * 而对于子类自有的方法,只能通过造型后执行
 * <p>
 * <p>
 * 内部类共有四种:成员/静态/局部/匿名
 *
 * @author RABBIT2002
 * @date 2020/12/10
 */
public abstract class AbstractClass {
    public static void main(String[] args) {
    }
}